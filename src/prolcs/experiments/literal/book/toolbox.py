import numpy as np  # type: ignore
from deap import creator, tools  # type: ignore
from prolcs.common import initRepeat_binom
from prolcs.literal.model import Model
from prolcs.match.radial1d_drugowitsch import RadialMatch1D
import prolcs.search.operators.drugowitsch as dop
from sklearn.utils import check_random_state  # type: ignore


class Toolbox(dop.Toolbox):
    def __init__(self, gaparams, random_state):
        """
        A toolbox based on ``prolcs.search.operators.drugowitsch.Toolbox`` with
        initialization and evaluation as defined in (Drugowitsch, 2007).
        """
        super().__init__(tournsize=gaparams["tournsize"])

        random_state = check_random_state(random_state)

        # “An individual is initially generated by randomly choosing the number
        # of classifiers it represents and then initializing the matching
        # function of each of its classifiers, again randomly.”
        self.register("gene", RadialMatch1D.random, random_state=random_state)
        self.register("genotype",
                      initRepeat_binom,
                      creator.Genotype,
                      self.gene,
                      n=gaparams["n"],
                      p=gaparams["p"],
                      random_state=random_state)

        self.register("population", tools.initRepeat, list, self.genotype)

        def _evaluate(genotype, X, y):
            genotype.phenotype = Model(matchs=genotype,
                                       random_state=random_state).fit(X, y)
            return (genotype.phenotype.p_M_D_, )

        self.register("evaluate", _evaluate)
